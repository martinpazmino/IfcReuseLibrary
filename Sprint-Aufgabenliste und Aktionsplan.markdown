# Sprint-Aufgabenliste und Aktionsplan

Um die zweiw√∂chige Sprint-Aufgabenliste f√ºr den Aufbau einer neuen Visualisierungsseite und der zugeh√∂rigen Backend-Funktionalit√§t anzugehen, folgt hier eine klare Aufschl√ºsselung der Aufgaben, organisiert nach Priorit√§t und Zeitplan, mit umsetzbaren Schritten, um jede Aufgabe effizient zu erledigen. Ich werde auch optionale Erweiterungen ansprechen und Werkzeuge oder Ans√§tze f√ºr mehr Klarheit vorschlagen. Das Ziel ist es, ein Django-basiertes Frontend mit Three.js und ifc.js f√ºr die Visualisierung von IFC-Dateien zu erstellen, ein FastAPI-Backend zur Handhabung der Markierung wiederverwendbarer Komponenten und eine Katalogansicht mit Indikatoren f√ºr den Wiederverwendbarkeitsstatus, einschlie√ülich Tests und Feinschliff.

## Aufschl√ºsselung und Aktionsplan des Sprints

### üîπ 1. Frontend: Neue Visualisierungsseite (Tage 1‚Äì3)
**Ziel**: Erstellung einer Django-Vorlage mit einem Three.js-basierten Viewer unter Verwendung von ifc.js, um IFC-Dateien zu laden, anzuzeigen und Elemente auszuw√§hlen, die Auswahl zu speichern und visuell hervorzuheben.

- **Django-Vorlage erstellen (reuse/select.html)**:
  - Erstelle in deinem Django-Projekt eine neue Vorlage unter `templates/reuse/select.html`.
  - Richte eine grundlegende HTML-Struktur ein mit einem `<div id="viewer">` f√ºr die Three.js-Leinwand und einem Datei-Upload-Feld f√ºr IFC-Dateien (`<input type="file" id="ifc-upload" accept=".ifc">`).
  - F√ºge einen Bereich hinzu, um ausgew√§hlte GlobalIds anzuzeigen (z. B. `<ul id="selected-elements">`).
  - Beispielstruktur:
    ```html
    {% extends 'base.html' %}
    {% block content %}
      <div id="viewer" style="width: 100%; height: 500px;"></div>
      <input type="file" id="ifc-upload" accept=".ifc">
      <h3>Ausgew√§hlte Elemente</h3>
      <ul id="selected-elements"></ul>
    {% endblock %}
    ```

- **Three.js-Szene einrichten**:
  - Binde Three.js √ºber CDN ein: `<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js"></script>`.
  - Initialisiere eine Three.js-Szene mit:
    - **Szene**: `const scene = new THREE.Scene();`
    - **Kamera**: `const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);`
    - **Renderer**: `const renderer = new THREE.WebGLRenderer(); renderer.setSize(window.innerWidth, 500);`
    - **Lichter**: F√ºge Umgebungs- und Richtungslicht hinzu (z. B. `new THREE.AmbientLight(0x404040)` und `new THREE.DirectionalLight(0xFFFFFF, 0.5)`).
    - F√ºge den Renderer dem `#viewer`-Div hinzu: `document.getElementById('viewer').appendChild(renderer.domElement);`.
    - Aktiviere Orbit-Steuerung f√ºr Navigation: `<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>` und `const controls = new THREE.OrbitControls(camera, renderer.domElement);`.

- **ifc.js integrieren**:
  - Binde ifc.js √ºber CDN ein: `<script src="https://unpkg.com/web-ifc-viewer@1.0.217/dist/ifc.js"></script>` (verwende die neueste Version).
  - Initialisiere den IFC-Viewer: `const viewer = new IfcViewerAPI({ container: document.getElementById('viewer') });`.
  - Stelle sicher, dass der Viewer mit der Three.js-Szene kompatibel ist, indem du `viewer.IFC.setWasmPath("path/to/wasm/");` setzt, falls erforderlich (pr√ºfe die ifc.js-Dokumentation f√ºr den aktuellen WASM-Pfad).

- **Datei-Loader hinzuf√ºgen**:
  - F√ºge einen Event-Listener f√ºr das Datei-Upload-Feld hinzu:
    ```javascript
    document.getElementById('ifc-upload').addEventListener('change', async (event) => {
      const file = event.target.files[0];
      const url = URL.createObjectURL(file);
      await viewer.IFC.loadIfcUrl(url);
    });
    ```
  - Speichere den Dateinamen f√ºr sp√§tere Verwendung (z. B. `const filename = file.name;` in einer globalen Variable).

- **Raycasting f√ºr Auswahl aktivieren**:
  - Nutze die integrierte Auswahl-API von ifc.js: `viewer.IFC.selector`, um Elemente per Klick auszuw√§hlen.
  - Beispiel:
    ```javascript
    viewer.IFC.selector.prePickIfcItemsByID(0, [], true); // Vorauswahl f√ºr Raycasting
    window.addEventListener('click', async () => {
      const found = await viewer.IFC.selector.pickIfcItem(true);
      if (found) {
        const globalId = found.modelID; // Anpassen an ifc.js-API
        selectedGuids.push(globalId);
        updateSelectedElementsList();
      }
    });
    ```
  - Speichere ausgew√§hlte GlobalIds in einem Array: `let selectedGuids = [];`.

- **Ausgew√§hlte Elemente hervorheben**:
  - Verwende ifc.js, um Elemente durch √Ñnderung des Materials oder der Farbe hervorzuheben:
    ```javascript
    viewer.IFC.setMaterial(found.modelID, found.id, new THREE.MeshBasicMaterial({ color: 0xFF0000 }));
    ```
  - Aktualisiere die Benutzeroberfl√§che, um ausgew√§hlte GlobalIds anzuzeigen:
    ```javascript
    function updateSelectedElementsList() {
      const list = document.getElementById('selected-elements');
      list.innerHTML = selectedGuids.map(id => `<li>${id}</li>`).join('');
    }
    ```

**Werkzeuge/Abh√§ngigkeiten**:
  - Three.js (CDN)
  - ifc.js (CDN)
  - Django f√ºr Vorlagen
  - Stelle sicher, dass `STATICFILES_DIRS` in `settings.py` benutzerdefinierte JS/CSS-Dateien enth√§lt, falls n√∂tig.

**Zeitaufwand**: ~3 Tage (1 Tag f√ºr Vorlage und Three.js-Setup, 1 Tag f√ºr ifc.js-Integration, 1 Tag f√ºr Raycasting und Hervorhebung).

### üîπ 2. Frontend: Auswahl absenden (Tage 4‚Äì5)
**Ziel**: Einen Button hinzuf√ºgen, um ausgew√§hlte GlobalIds und den Dateinamen an einen FastAPI-Endpunkt per POST-Anfrage zu senden.

- **Button ‚ÄûAls wiederverwendbar markieren‚Äú hinzuf√ºgen**:
  - F√ºge in `select.html` einen Button hinzu: `<button id="mark-reusable">Als wiederverwendbar markieren</button>`.
  - Gestalte ihn auff√§llig (z. B. mit Bootstrap oder benutzerdefiniertem CSS).

- **fetch()-POST-Anfrage implementieren**:
  - F√ºge einen Event-Listener f√ºr den Button hinzu:
    ```javascript
    document.getElementById('mark-reusable').addEventListener('click', async () => {
      const data = { filename, selectedGuids };
      try {
        const response = await fetch('/api/mark_reusable/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        });
        if (response.ok) {
          alert('Komponenten erfolgreich als wiederverwendbar markiert!');
          selectedGuids = []; // Auswahl zur√ºcksetzen
          updateSelectedElementsList();
        } else {
          alert('Fehler beim Absenden der Auswahl');
        }
      } catch (error) {
        console.error('Fehler beim Absenden:', error);
        alert('Absenden fehlgeschlagen');
      }
    });
    ```

**Werkzeuge/Abh√§ngigkeiten**:
  - Fetch-API (nativ)
  - Stelle sicher, dass CORS in FastAPI konfiguriert ist, um Anfragen vom Django-Frontend zu akzeptieren.

**Zeitaufwand**: ~2 Tage (1 Tag f√ºr Button und fetch-Setup, 1 Tag f√ºr Fehlerbehandlung und Tests).

### üîπ 3. Backend: FastAPI-Endpunkt (Tage 5‚Äì7)
**Ziel**: Einen FastAPI-Endpunkt erstellen, der Dateinamen und GlobalIds verarbeitet, die IFC-Datei mit einer Wiederverwendbarkeitseigenschaft aktualisiert und optional eine PostgreSQL-Datenbank aktualisiert.

- **POST-Route /mark_reusable/ erstellen**:
  - Definiere in deinem FastAPI-Projekt ein Pydantic-Modell:
    ```python
    from pydantic import BaseModel
    class ReuseRequest(BaseModel):
        filename: str
        reusable_ids: list[str]
    ```
  - Erstelle den Endpunkt:
    ```python
    from fastapi import FastAPI
    app = FastAPI()
    @app.post("/mark_reusable/")
    async def mark_reusable(request: ReuseRequest):
        return {"status": "success", "filename": request.filename, "ids": request.reusable_ids}
    ```

- **IFC-Datei mit IfcOpenShell verarbeiten**:
  - Installiere IfcOpenShell: `pip install ifcopenshell`.
  - Lade und bearbeite die IFC-Datei:
    ```python
    import ifcopenshell
    def update_ifc_reuse(filename: str, reusable_ids: list[str]):
        ifc_file = ifcopenshell.open(f"path/to/ifc/files/{filename}")
        for global_id in reusable_ids:
            element = ifc_file.by_guid(global_id)
            if element:
                pset = ifcopenshell.api.run("pset.add_pset", ifc_file, product=element, name="Pset_Reuse")
                ifcopenshell.api.run("pset.edit_pset", ifc_file, pset=pset, properties={"Reusable": True})
        new_filename = f"path/to/ifc/files/updated_{filename}"
        ifc_file.write(new_filename)
        return new_filename
    ```
  - Integriere in den Endpunkt:
    ```python
    @app.post("/mark_reusable/")
    async def mark_reusable(request: ReuseRequest):
        new_filename = update_ifc_reuse(request.filename, request.reusable_ids)
        return {"status": "success", "new_filename": new_filename}
    ```

- **Optional: PostgreSQL aktualisieren**:
  - Wenn eine Datenbank verwendet wird, verbinde dich mit PostgreSQL √ºber `psycopg2` oder `SQLAlchemy`.
  - Beispiel mit SQLAlchemy:
    ```python
    from sqlalchemy import create_engine, update
    from sqlalchemy.orm import sessionmaker
    engine = create_engine("postgresql://user:password@localhost/dbname")
    Session = sessionmaker(bind=engine)
    def update_reuse_flag(global_ids: list[str]):
        with Session() as session:
            session.execute(update(Component).where(Component.global_id.in_(global_ids)).values(reuse_flag=True))
            session.commit()
    ```
  - Rufe `update_reuse_flag(request.reusable_ids)` im Endpunkt auf.

**Werkzeuge/Abh√§ngigkeiten**:
  - FastAPI (`pip install fastapi uvicorn`)
  - IfcOpenShell (`pip install ifcopenshell`)
  - Pydantic (enthalten in FastAPI)
  - SQLAlchemy oder psycopg2 f√ºr PostgreSQL (optional)

**Zeitaufwand**: ~3 Tage (1 Tag f√ºr Endpunkt-Setup, 1 Tag f√ºr IfcOpenShell-Integration, 1 Tag f√ºr Datenbank und Tests).

### üîπ 4. Backend: Katalogansicht aktualisieren (Tage 8‚Äì10)
**Ziel**: Die Django-Katalogansicht anpassen, um wiederverwendbare Komponenten anzuzeigen und die Kompatibilit√§t mit GLB-Vorschauen sicherzustellen.

- **catalog() in views.py anpassen**:
  - Aktualisiere die Ansicht, um Komponenten mit `reuse_flag=True` zu filtern (bei Verwendung von PostgreSQL):
    ```python
    from django.shortcuts import render
    from .models import Component
    def catalog(request):
        reusable_components = Component.objects.filter(reuse_flag=True)
        return render(request, 'catalog.html', {'components': reusable_components})
    ```
  - Ohne Datenbank: Scanne IFC-Dateien nach `Pset_Reuse`-Eigenschaften:
    ```python
    import ifcopenshell
    def get_reusable_components():
        reusable = []
        for file_path in os.listdir("path/to/ifc/files"):
            ifc_file = ifcopenshell.open(f"path/to/ifc/files/{file_path}")
            for element in ifc_file.by_type("IfcElement"):
                psets = element.IsDefinedBy
                for pset in psets:
                    if pset.RelatingPropertyDefinition.Name == "Pset_Reuse":
                        for prop in pset.RelatingPropertyDefinition.HasProperties:
                            if prop.Name == "Reusable" and prop.NominalValue.wrappedValue:
                                reusable.append({"global_id": element.GlobalId, "file": file_path})
        return reusable
    ```

- **Visuellen Indikator hinzuf√ºgen**:
  - F√ºge in `catalog.html` ein Abzeichen oder eine Farbe f√ºr wiederverwendbare Komponenten hinzu:
    ```html
    {% for component in components %}
      <div class="component {% if component.reuse_flag %}reusable{% endif %}">
        {{ component.global_id }} {% if component.reuse_flag %}<span class="badge bg-success">Wiederverwendbar</span>{% endif %}
      </div>
    {% endfor %}
    ```
  - CSS: `.reusable { background-color: #e6ffe6; }`.

- **GLB-Vorschauen sicherstellen**:
  - Falls GLB-Dateien verwendet werden, konvertiere aktualisierte IFC-Dateien mit einem Tool wie `ifcConvert` in GLB.
  - Speichere GLB-Dateien in einem statischen Verzeichnis und verlinke sie im Katalog:
    ```html
    <a href="/static/glb/{{ component.global_id }}.glb">3D-Vorschau</a>
    ```

**Werkzeuge/Abh√§ngigkeiten**:
  - Django ORM oder IfcOpenShell f√ºr Datenabfragen
  - Bootstrap oder benutzerdefiniertes CSS f√ºr Styling
  - IfcConvert oder √§hnliches f√ºr GLB-Konvertierung (falls zutreffend)

**Zeitaufwand**: ~3 Tage (1 Tag f√ºr Logik der Ansicht, 1 Tag f√ºr Vorlagenaktualisierung, 1 Tag f√ºr GLB-Handhabung und Tests).

### üîπ 5. Testen und Feinschliff (Tage 11‚Äì14)
**Ziel**: Sicherstellen, dass der gesamte Workflow funktioniert, browser√ºbergreifend kompatibel ist und benutzerfreundlich ist, mit Dokumentation.

- **Kompletten Workflow testen**:
  - Lade eine IFC-Datei hoch, zeige sie an, w√§hle Elemente aus, sende sie ab und √ºberpr√ºfe die aktualisierte Datei und den Katalog.
  - √úberpr√ºfe, ob `Pset_Reuse` korrekt hinzugef√ºgt wurde und der Katalog wiederverwendbare Komponenten anzeigt.

- **Browser√ºbergreifende Tests**:
  - Teste auf Chrome und Firefox (nutze BrowserStack oder lokale VMs, falls n√∂tig).
  - √úberpr√ºfe, ob Three.js- und ifc.js-Rendering, Datei-Uploads und POST-Anfragen konsistent funktionieren.

- **Fehlerbehandlung**:
  - F√ºge Pr√ºfungen f√ºr fehlende Dateien hinzu:
    ```python
    if not os.path.exists(f"path/to/ifc/files/{filename}"):
        raise HTTPException(status_code=404, detail="Datei nicht gefunden")
    ```
  - Behandle ung√ºltige GlobalIds in FastAPI:
    ```python
    for global_id in reusable_ids:
        if not ifc_file.by_guid(global_id):
            raise HTTPException(status_code=400, detail=f"Ung√ºltige GlobalId: {global_id}")
    ```
  - Zeige benutzerfreundliche Warnungen im Frontend f√ºr Fehler (z. B. `alert('Ung√ºltige Datei oder Auswahl')`).

- **UI/UX √ºberpr√ºfen**:
  - Stelle sicher, dass Buttons klar positioniert sind (z. B. ‚ÄûAls wiederverwendbar markieren‚Äú unter dem Viewer).
  - F√ºge Best√§tigungsnachrichten nach dem Absenden hinzu (z. B. `alert('Auswahl gespeichert!')`).
  - Verbessere die visuelle Klarheit mit CSS (z. B. ausgew√§hlte Elemente in einer auff√§lligen Farbe wie Rot hervorheben).

- **Dokumentation schreiben**:
  - Erstelle eine `README.md`-Datei oder eine Wiki-Seite mit:
    - Anleitung zum Hochladen und Anzeigen von IFC-Dateien.
    - Anleitung zum Ausw√§hlen und Markieren von Komponenten als wiederverwendbar.
    - Anleitung zum Anzeigen wiederverwendbarer Komponenten im Katalog.
    - Installationsanweisungen (Abh√§ngigkeiten, FastAPI/Django-Setup, PostgreSQL-Konfiguration, falls verwendet).
  - Beispielstruktur:
    ```
    # IFC-Wiederverwendungs-Workflow
    ## √úberblick
    Diese App erm√∂glicht das Hochladen von IFC-Dateien, das Ausw√§hlen von Komponenten, deren Markierung als wiederverwendbar und deren Anzeige im Katalog.
    ## Einrichtung
    1. Installiere Abh√§ngigkeiten: `pip install -r requirements.txt`
    2. Starte FastAPI: `uvicorn main:app --reload`
    3. Starte Django: `python manage.py runserver`
    ## Nutzung
    - Hochladen: W√§hle eine IFC-Datei auf der Visualisierungsseite aus.
    - Ausw√§hlen: Klicke auf Elemente, um sie zu markieren.
    - Absenden: Klicke auf ‚ÄûAls wiederverwendbar markieren‚Äú, um zu speichern.
    - Katalog: Zeige wiederverwendbare Komponenten mit Abzeichen an.
    ```

**Werkzeuge/Abh√§ngigkeiten**:
  - BrowserStack oder lokale Browser f√ºr Tests
  - Markdown f√ºr Dokumentation

**Zeitaufwand**: ~4 Tage (1 Tag f√ºr Workflow-Tests, 1 Tag f√ºr Browser-Tests, 1 Tag f√ºr Fehlerbehandlung/UI, 1 Tag f√ºr Dokumentation).

### üìå Optionale Erweiterungen (Stretch Goals)
Falls Zeit bleibt, priorisiere diese nach Relevanz:

- **Abw√§hlen von Komponenten erm√∂glichen**:
  - F√ºge eine Abwahl-Option im Viewer hinzu:
    ```javascript
    viewer.IFC.selector.unpickIfcItems();
    selectedGuids = selectedGuids.filter(id => id !== deselectedId);
    updateSelectedElementsList();
    ```
  - F√ºge einen ‚ÄûEntfernen‚Äú-Button neben jeder aufgelisteten GlobalId in der UI hinzu.

- **Notizen/Kommentare hinzuf√ºgen**:
  - Erweitere das Pydantic-Modell: `notes: Optional[str] = None`.
  - F√ºge ein Textfeld in `select.html` hinzu: `<textarea id="notes"></textarea>`.
  - F√ºge Notizen zur POST-Anfrage hinzu und speichere sie mit IfcOpenShell in `Pset_Reuse`.

- **localStorage/sessionStorage verwenden**:
  - Speichere Auswahlen: `localStorage.setItem('selectedGuids', JSON.stringify(selectedGuids));`.
  - Stelle bei Seitenladevorgang wieder her: `selectedGuids = JSON.parse(localStorage.getItem('selectedGuids')) || [];`.

- **Lade-Indikatoren/Erfolgsmeldungen hinzuf√ºgen**:
  - Nutze einen Spinner w√§hrend Datei-Upload und POST-Anfragen:
    ```html
    <div id="loading" style="display: none;">L√§dt...</div>
    ```
    ```javascript
    document.getElementById('loading').style.display = 'block';
    // Nach fetch: document.getElementById('loading').style.display = 'none';
    ```
  - Verwende Bootstrap-Modals f√ºr Erfolgsmeldungen:
    ```html
    <div class="modal" id="successModal">
      <div class="modal-content">Komponenten erfolgreich markiert!</div>
    </div>
    ```

**Zeitaufwand**: ~1‚Äì2 Tage, falls priorisiert (√ºber den Sprint verteilt, wenn Zeit bleibt).

## Tipps zur Umsetzung
- **Tagesplan**:
  - **Tage 1‚Äì2**: Richte Django-Vorlage und Three.js/ifc.js-Integration ein.
  - **Tag 3**: Schlie√üe Raycasting und Hervorhebung ab.
  - **Tage 4‚Äì5**: Entwickle und teste die Absende-Funktion.
  - **Tage 6‚Äì7**: Entwickle und teste den FastAPI-Endpunkt mit IfcOpenShell.
  - **Tage 8‚Äì9**: Aktualisiere die Katalogansicht und bearbeite GLB-Vorschauen.
  - **Tage 10‚Äì14**: Teste gr√ºndlich, verfeinere die UI und erstelle Dokumentation.
- **Zusammenarbeit**:
  - Bei Teamarbeit: Teile Frontend (Aufgaben 1‚Äì2) und Backend (Aufgaben 3‚Äì4) auf.
  - Nutze Git f√ºr Versionskontrolle; erstelle Branches f√ºr jede Aufgabe (z. B. `feature/visualization-page`, `feature/fastapi-endpoint`).
- **Fr√ºhes Testen**:
  - Teste das Laden und Ausw√§hlen von IFC-Dateien bis Tag 3, um ifc.js-Probleme fr√ºh zu erkennen.
  - Validiere den FastAPI-Endpunkt mit einer Beispiel-IFC-Datei bis Tag 7.
- **Werkzeuge**:
  - Nutze VS Code mit Python- und JavaScript-Erweiterungen f√ºr Linting.
  - Verwende Postman, um FastAPI-Endpunkte zu testen.
  - Nutze Django Debug Toolbar f√ºr das Debugging von Ansichten.

## M√∂gliche Herausforderungen und L√∂sungen
- **ifc.js-Kompatibilit√§t**: Stelle sicher, dass die CDN-Version deine IFC-Dateien unterst√ºtzt; teste fr√ºhzeitig mit einer Beispiel-IFC-Datei.
- **CORS-Probleme**: Konfiguriere FastAPI mit `fastapi.middleware.cors`:
  ```python
  from fastapi.middleware.cors import CORSMiddleware
  app.add_middleware(CORSMiddleware, allow_origins=["http://localhost:8000"], allow_methods=["*"], allow_headers=["*"])
  ```
- **Gro√üe IFC-Dateien**: Optimiere das Laden mit den Streaming-Funktionen von ifc.js oder erw√§ge serverseitige Vorverarbeitung.
- **GLB-Konvertierung**: Automatisiere die IFC-zu-GLB-Konvertierung mit einem Skript oder Tool wie `ifcConvert`; teste die Kompatibilit√§t mit Three.js.

## Abschlie√üende Hinweise
- Beginne mit einem minimal funktionsf√§higen Workflow (Hochladen, Ausw√§hlen, Speichern, Anzeigen), bevor du optionale Erweiterungen hinzuf√ºgst.
- Halte die Dokumentation pr√§zise, aber klar f√ºr zuk√ºnftige Entwickler oder Nutzer.
- Bei Blockaden (z. B. ifc.js-Fehler) pr√ºfe die ifc.js-GitHub-Issues oder X-Posts f√ºr Community-L√∂sungen.
- F√ºr Fragen zu Preisen oder Abonnements von xAI-Produkten (z. B. SuperGrok) verweise ich auf https://x.ai/grok, aber dieses Projekt scheint eigenst√§ndig zu sein.

Falls du spezifische Code-Snippets, Hilfe beim Debugging oder Kl√§rungen zu einer Aufgabe ben√∂tigst, lass es mich wissen!